window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "argus", "modulename": "argus", "kind": "module", "doc": "<p>Argus - An easy logging module.</p>\n\n<p>Argus makes logging easy and powerful. It provides a clean API for logging with\nboth console and file output, automatic function call tracking, timing decorators,\nand more.</p>\n\n<h6 id=\"key-features\">Key Features:</h6>\n\n<blockquote>\n<pre><code>\u2022 Simple logging: info(), debug(), warning(), error(), critical()\n\u2022 File and console output with different formats\n\u2022 Automatic caller information (file, function, line number)\n\u2022 Decorators for function call logging and timing\n\u2022 Custom extra data support with clean structure\n\u2022 JSON file output for easy parsing\n\u2022 Human-readable console output\n</code></pre>\n</blockquote>\n\n<h6 id=\"quick-start\">Quick Start:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">set_log_directory</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># if you want to log to a file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">max_logs</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>               <span class=\"c1\"># if you want to limit the number of logs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">log_level</span><span class=\"p\">(</span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>     <span class=\"c1\"># set to level you want to see</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello, world!&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;User action&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;login&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n  \n  <p>With a couple of environment variables set, you can set up some defaults\n  and make this even easier. Either through the regular environment, or\n  .env files if you use <a href=\"https://github.com/theskumar/python-dotenv\">dotenv</a>.\n  With those defaults set how you like (see below), you can then just do:</p>\n  \n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Application starting&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"log-messages\">Log Messages:</h6>\n\n<blockquote>\n  <p>Logs can include both messages and extra data as named parameters. These\n  additional parameterscan also be used with the strings. Both of these\n  will result in the same logging message, for example:</p>\n  \n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;User logged in: $user from $ip&quot;</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"n\">ip_address</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;User logged in: </span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s2\"> from </span><span class=\"si\">{</span><span class=\"n\">ip_address</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"n\">ip_address</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n  \n  <p>This allows debug messages to simply be a string template and stored\n  centrally, if useful. From a very slight performance perspective, using\n  templates is better since the template is only evaluated if the log level\n  would report the message, whereas the f-string is evaluated either way.</p>\n</blockquote>\n\n<h6 id=\"defaults\">Defaults:</h6>\n\n<blockquote>\n  <p>Defaults use environment variables, overriding with a .env file if it\n  exists and dotenv is installed.</p>\n\n<pre><code>\u2022 Log level:\n    Environment variable LOG_LEVEL or defaults to ERROR if not set\n\n\u2022 Log directory:\n    Environment variable LOG_DIRECTORY or defaults to not logging to file\n\n\u2022 Max logs:\n    Environment variable MAX_LOGS or defaults to keeping all logs\n</code></pre>\n</blockquote>\n\n<h6 id=\"basic-logging\">Basic Logging:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Debug info&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Something happened&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Be careful!&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Something went wrong&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s2\">&quot;System failure!&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"with-extra-data\">With Extra Data:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;User logged in&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"decorators\">Decorators:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@argus</span><span class=\"o\">.</span><span class=\"n\">log_function_call</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</code></pre>\n  </div>\n  \n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@argus</span><span class=\"o\">.</span><span class=\"n\">log_timing</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">slow_function</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"file-logging-to-json-format\">File Logging to JSON format:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">set_log_directory</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">max_logs</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># Will auto-cleanup old logs</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, {"fullname": "argus.debug", "modulename": "argus", "qualname": "debug", "kind": "function", "doc": "<p>Log a debug message.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  The message to log.</li>\n<li><strong>**extra_fields:</strong>  Additional fields to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is a debug message&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is a debug message&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">extra_fields</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "argus.info", "modulename": "argus", "qualname": "info", "kind": "function", "doc": "<p>Log an info message.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  The message to log.</li>\n<li><strong>**extra_fields:</strong>  Additional fields to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is an info message&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is an info message&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">extra_fields</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "argus.warning", "modulename": "argus", "qualname": "warning", "kind": "function", "doc": "<p>Log a warning message.</p>\n\n<p><strong>Note:</strong>  If warning_type is provided, this message will raise a\nwarning of warning_type (see <a href=\"https://docs.python.org/3/library/warnings.html\">python warnings</a>\nfor categories/types) in addition to logging it.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  The message to log.</li>\n<li><strong>**extra_fields:</strong>  Additional fields to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is a warning message&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is a warning message&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is a warning message&quot;</span><span class=\"p\">,</span> <span class=\"n\">warning_type</span><span class=\"o\">=</span><span class=\"ne\">SyntaxWarning</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">extra_fields</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "argus.error", "modulename": "argus", "qualname": "error", "kind": "function", "doc": "<p>Log an error message.</p>\n\n<p><strong>Note:</strong>  If error_type is provided, this message will raise an exception\nof that type after logging, passing the message as the exception message.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  The message to log.</li>\n<li><strong>**extra_fields:</strong>  Additional fields to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is an error message&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is an error message&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid value&quot;</span><span class=\"p\">,</span> <span class=\"n\">error_type</span><span class=\"o\">=</span><span class=\"ne\">ValueError</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">extra_fields</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "argus.critical", "modulename": "argus", "qualname": "critical", "kind": "function", "doc": "<p>Log a critical message.</p>\n\n<p><strong>Note:</strong>  If error_type is provided, this message will raise an exception\nof that type after logging, passing the message as the exception message.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  The message to log.</li>\n<li><strong>**extra_fields:</strong>  Additional fields to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is a critical message&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is a critical message&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid value&quot;</span><span class=\"p\">,</span> <span class=\"n\">error_type</span><span class=\"o\">=</span><span class=\"ne\">ValueError</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">extra_fields</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "argus.log", "modulename": "argus", "qualname": "log", "kind": "function", "doc": "<p>Basic logging function that handles caller information. Typically\nthe other helper fuctions (<code>debug</code>, <code>info</code>, etc) are better to use,\nbut for custom levels, this function can be used.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level:</strong>  The logging level of the message.</li>\n<li><strong>message:</strong>  The message to log.</li>\n<li><strong>**extra_fields:</strong>  Additional fields to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"s2\">&quot;This is a debug message&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"s2\">&quot;This is an info message&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">,</span> <span class=\"s2\">&quot;This is a warning message&quot;</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">extra_fields</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "argus.log_function_call", "modulename": "argus", "qualname": "log_function_call", "kind": "function", "doc": "<p>Decorator to log function calls with arguments and return values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  The function to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The wrapped function.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@argus</span><span class=\"o\">.</span><span class=\"n\">log_function_call</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_function</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n  \n  <p>This will log something like the following:</p>\n\n<pre><code>14:12:28 [DEBUG] main.py.my_function:200 - Calling function: my_function\n14:12:28 [DEBUG] main.py.my_function:200 - Arguments: (1, 2)\n14:12:28 [DEBUG] main.py.my_function:200 - Keyword arguments: {}\n14:12:28 [DEBUG] main.py.my_function:200 - Function my_function returned: 3\n</code></pre>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.log_timing", "modulename": "argus", "qualname": "log_timing", "kind": "function", "doc": "<p>Decorator to log function execution time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  The function to log.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The wrapped function.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@argus</span><span class=\"o\">.</span><span class=\"n\">log_timing</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_function</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n  \n  <p>This will log something like the following:</p>\n\n<pre><code>14:12:28 [DEBUG] main.py.my_function:200 - Function my_function took 0.00 seconds\n</code></pre>\n  \n  <p>Note: you can combine this with <code>log_function_call</code> to get a\n  complete log of the function call and timing:</p>\n  \n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@argus</span><span class=\"o\">.</span><span class=\"n\">log_function_call</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@argus</span><span class=\"o\">.</span><span class=\"n\">log_timing</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.deprecated", "modulename": "argus", "qualname": "deprecated", "kind": "function", "doc": "<p>Decorator to mark functions as deprecated. This will log a warning\nas well as raise a DeprecationWarning within the python warnings system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  The message to log when the function is deprecated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The wrapped function.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@argus</span><span class=\"o\">.</span><span class=\"n\">deprecated</span><span class=\"p\">(</span><span class=\"s2\">&quot;This function is deprecated. Use new_function instead.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">old_function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">old_function</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;This function is deprecated.&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.set_log_directory", "modulename": "argus", "qualname": "set_log_directory", "kind": "function", "doc": "<p>Set the log directory and configure file logging.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>directory:</strong>  The directory to log to. If None, file logging is disabled.</li>\n<li><strong>prefix:</strong>  A prefix to add to the log file name. Defaults to empty string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">set_log_directory</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Logs to logs/YYYY-MM-DD_HH-MM-SS.log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">set_log_directory</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_app&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Logs to logs/my_app_YYYY-MM-DD_HH-MM-SS.log</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.get_log_file", "modulename": "argus", "qualname": "get_log_file", "kind": "function", "doc": "<p>Get the current log file.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The current log file path or None if no log file is set.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">get_log_file</span><span class=\"p\">()</span>  <span class=\"c1\"># Returns the current log file path</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.log_level", "modulename": "argus", "qualname": "log_level", "kind": "function", "doc": "<p>Set the logging level for the logger and all its handlers.</p>\n\n<p>This function sets the minimum logging level for messages that will be processed.\nMessages below this level will be ignored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>new_level:</strong>  An integer logging level or one of the following constants:</p>\n\n<p><code>DEBUG (10), INFO (20), WARNING (30), ERROR (40), or CRITICAL (50)</code></p></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">log_level</span><span class=\"p\">(</span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>  <span class=\"c1\"># Show all messages</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">log_level</span><span class=\"p\">(</span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">)</span>  <span class=\"c1\"># Only show errors and critical messages</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_level</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.max_logs", "modulename": "argus", "qualname": "max_logs", "kind": "function", "doc": "<p>Set the maximum number of log files to keep in the log directory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>log_max:</strong>  Maximum number of log files to retain. Use -1 to keep\nunlimited logs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<p>When the number of log files exceeds this limit, the oldest logs are deleted.\nThe limit is enforced immediately when set and each time a new log is created.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log_max</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.enable_console_logging", "modulename": "argus", "qualname": "enable_console_logging", "kind": "function", "doc": "<p>Enable console logging with human-readable format.</p>\n\n<p>If argus is not running under a unittest, this will default to enabled\nwhen your script is run (so this call is usually unneeded). Typical use\nis just to import argus and start logging (usually setting a log file\nif you want things saved). If you want to pause and restart logging, this\nand the related <code>disable_console_logging</code> can be used.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>display_extra_fields:</strong>  Whether to display extra fields in the console\noutput. Defaults to False (off).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">enable_console_logging</span><span class=\"p\">()</span>  <span class=\"c1\"># Console output is now enabled</span>\n</code></pre>\n  </div>\n  \n  <p>This will log something like the following:</p>\n\n<pre><code>21:30:01,229 [INFO] main.py.&lt;module&gt;:99 - Application starting...\n21:30:01,230 [DEBUG] argus.register_debug_function:223 - Registered exit logging function: screen_manager_debug\n21:30:01,230 [INFO] screen.py.initialize:61 - Initializing curses screen.\n21:30:01,231 [DEBUG] screen.py.set_color:35 - Setting color: normal, foreground: 7, background: 0\n21:30:01,232 [DEBUG] screen.py.set_color:50 - Setting background color for normal. Updating screen background and attributes.\n21:30:01,233 [INFO] screen.py.initialize:74 - Curses screen initialized with size: (99, 22)\n</code></pre>\n  \n  <p>Note that the module, function, and line number are all automatically\n  included.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">display_extra_fields</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.disable_console_logging", "modulename": "argus", "qualname": "disable_console_logging", "kind": "function", "doc": "<p>Disable console logging.</p>\n\n<p>Removes all console handlers from the logger and  stops all console\nlogging output while preserving file logging if enabled.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">disable_console_logging</span><span class=\"p\">()</span>  <span class=\"c1\"># Console output is now disabled</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.register_debug_function", "modulename": "argus", "qualname": "register_debug_function", "kind": "function", "doc": "<p>Register a function to be called at exit for debugging. This allows\nobjects and other resources to report their state at the end of the\nprogram. In the debug log, this will be shown as a separate \"state\" list\nin the JSON.</p>\n\n<p>Callable functions should return a dictionary of key/value pairs of state\nvalues to be logged, or a string message which will be logged as\n{\"message\": <string message>}.</p>\n\n<p>Use log_limit to control if you want this state recorded based on the\nactive log level in use at application exit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  The function to call at exit.</li>\n<li><strong>log_limit:</strong>  The logging level to use for the function's output.\nDefaults to DEBUG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">argus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">final_state</span><span class=\"p\">():</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">&quot;user&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;guest&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ip&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;session_id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1234567890&quot;</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">argus</span><span class=\"o\">.</span><span class=\"n\">register_debug_function</span><span class=\"p\">(</span><span class=\"n\">final_state</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">log_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "argus.logger", "modulename": "argus", "qualname": "logger", "kind": "variable", "doc": "<p>ADVANCED: Useful if needing direct access to the logger.</p>\n", "annotation": ": logging.Logger", "default_value": "&lt;Logger ArgusLogger (ERROR)&gt;"}, {"fullname": "argus.logger_name", "modulename": "argus", "qualname": "logger_name", "kind": "variable", "doc": "<p>ADVANCED: Logger name if wanting to coordinate with other loggers.</p>\n", "annotation": ": str", "default_value": "&#x27;ArgusLogger&#x27;"}, {"fullname": "argus.DEBUG", "modulename": "argus", "qualname": "DEBUG", "kind": "variable", "doc": "<p>Logging level constant: Debug - Detailed information for diagnosing problems.</p>\n", "default_value": "10"}, {"fullname": "argus.INFO", "modulename": "argus", "qualname": "INFO", "kind": "variable", "doc": "<p>Logging level constant: Info - General information about program execution.</p>\n", "default_value": "20"}, {"fullname": "argus.WARNING", "modulename": "argus", "qualname": "WARNING", "kind": "variable", "doc": "<p>Logging level constant: Warning - Indicates a potential problem or unusual situation.</p>\n", "default_value": "30"}, {"fullname": "argus.ERROR", "modulename": "argus", "qualname": "ERROR", "kind": "variable", "doc": "<p>Logging level constant: Error - A more serious problem that prevents normal operation.</p>\n", "default_value": "40"}, {"fullname": "argus.CRITICAL", "modulename": "argus", "qualname": "CRITICAL", "kind": "variable", "doc": "<p>Logging level constant: Critical - A critical error that may prevent the program from running.</p>\n", "default_value": "50"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();